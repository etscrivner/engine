#ifdef VERTEX_SHADER
layout (location = 0) in vec4 in_Source;
layout (location = 1) in vec2 in_P0;
layout (location = 2) in vec2 in_P1;
layout (location = 3) in vec2 in_P2;
layout (location = 4) in vec2 in_P3;
layout (location = 5) in vec4 in_C0;
layout (location = 6) in vec4 in_C1;
layout (location = 7) in vec4 in_C2;
layout (location = 8) in vec4 in_C3;

uniform mat4 u_ViewProjection;

out vec4 frag_Color;
out vec4 frag_Source;
out vec2 frag_UV;

void main()
{
  vec2 Vertices[] = vec2[](in_P1, in_P0, in_P3, in_P2);
  vec4 Colors[] = vec4[](in_C1, in_C0, in_C3, in_C2);
  vec2 TexCoord[] = vec2[](vec2(0, 0), vec2(0, 1), vec2(1, 0), vec2(1, 1));

  frag_Color = Colors[gl_VertexID];
  frag_Source = in_Source;
  frag_UV = TexCoord[gl_VertexID];
  
  vec4 WorldSpace = vec4(Vertices[gl_VertexID], 0.0, 1.0);
  gl_Position = WorldSpace * u_ViewProjection;
}
#endif

#ifdef FRAGMENT_SHADER
in vec4 frag_Color;
in vec4 frag_Source;
in vec2 frag_UV;

uniform sampler2D u_Texture;
uniform vec2 u_TextureDim;

out vec4 out_Color;

void main()
{
  vec2 UVOffset = frag_Source.xy;
  vec2 UVRange = frag_Source.zw;
  vec2 Scale = vec2(4, 4);
    
  vec2 Pixel = (UVOffset + (frag_UV * UVRange));

  // Emulate point sampling
  vec2 Alpha = 0.1 * vec2(dFdx(frag_UV.x), dFdy(frag_UV.y));
  vec2 X = fract(frag_UV);
  vec2 TexelOffset = clamp(0.5 / Alpha * X, 0.0, 0.5) + clamp(0.5 / Alpha * (X - 1.0) + 0.5, 0.0, 0.5);
  vec2 SampleUV = floor(Pixel) + vec2(0.5, 0.5); //TexelOffset;

  // Subpixel anti-aliasing
  SampleUV.x += 1.0 - clamp((1.0 - fract(Pixel.x)) * abs(Scale.x), 0.0, 1.0);
  SampleUV.y += 1.0 - clamp((1.0 - fract(Pixel.y)) * abs(Scale.y), 0.0, 1.0);

  // Clamp UV to ensure we don't sample sample outside of the texture atlas item
  SampleUV = clamp(SampleUV, UVOffset, UVOffset + UVRange);
    
  out_Color = texture(u_Texture, SampleUV / u_TextureDim);

  if (out_Color.a > 0.01)
  {
    // Handle pre-multiplied alpha
    out_Color *= frag_Color;
    //out_Color.xyz /= out_Color.a;
  }
  else
  {
    discard;
  }
}
#endif
