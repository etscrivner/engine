#ifdef VERTEX_SHADER
layout (location = 0) in vec2 P0;
layout (location = 1) in vec2 P1;
layout (location = 2) in vec2 P2;
layout (location = 3) in vec2 P3;
layout (location = 4) in vec4 C0;
layout (location = 5) in vec4 C1;
layout (location = 6) in vec4 C2;
layout (location = 7) in vec4 C3;

out vec4 FragmentColor;

uniform mat4 ViewProjection;

void main() {
  vec2 Vertices[] = vec2[](P0, P1, P2, P3);
  vec4 Colors[] = vec4[](C0, C1, C2, C3);

  vec4 WorldSpace = vec4(Vertices[gl_VertexID], 0.0, 1.0);
  gl_Position = WorldSpace * ViewProjection;
  FragmentColor = Colors[gl_VertexID];
}
#endif

#ifdef FRAGMENT_SHADER
in vec4 FragmentColor;

out vec4 ResultingColor;

void main() {
  ResultingColor = FragmentColor;
}
#endif